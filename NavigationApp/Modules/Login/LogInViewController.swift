import UIKit
import SnapKit

protocol LoginViewModelDelegate: AnyObject {
    func didReciveErorMessage(_ message: String?)
}

private enum LoginLockoutKeys {
    static let failedAttempts = "loginFailedAttempts"
    static let lockoutUntil = "loginLockoutUntil"
}

class LogInViewController: UIViewController {
    private var viewModel: LoginViewModeling
    private var lockoutTimer: Timer?
    private var remainingLockoutSeconds: Int = 0
    
    // MARK: - UI —ç–ª–µ–º–µ–Ω—Ç—ã (–±–µ–∑ IBOutlet)
    lazy var scrollView: UIScrollView = {
        let scrollView = UIScrollView()
        print("üåÄ scrollView —Å–æ–∑–¥–∞–Ω")
        return scrollView
    }()
    
    lazy var contentView: UIView = {
        let view = UIView()
        view.backgroundColor = .white
        print("üìÑ contentView —Å–æ–∑–¥–∞–Ω")
        return view
    }()
    
    lazy var logoImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "logo")
        imageView.contentMode = .scaleAspectFit
        print("üñº logoImageView —Å–æ–∑–¥–∞–Ω")
        return imageView
    }()
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—ã–π label –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    lazy var lockoutLabel: UILabel = {
        let label = UILabel()
        label.textColor = .systemRed
        label.font = .systemFont(ofSize: 14, weight: .bold)
        label.textAlignment = .center
        label.isHidden = true
        return label
    }()
    
    lazy var loginTextField: UITextField = {
        let textField = UITextField()
        textField.placeholder = "Login"
        textField.borderStyle = .none
        textField.layer.borderWidth = 1
        textField.layer.borderColor = UIColor.black.cgColor
        textField.layer.cornerRadius = 10
        textField.layer.maskedCorners = [.layerMinXMinYCorner, .layerMaxXMinYCorner]
        textField.leftView = UIView(frame: CGRect(x: 0, y: 0, width: 10, height: 50))
        textField.leftViewMode = .always
        textField.rightView = UIView(frame: CGRect(x: 0, y: 0, width: 10, height: 50))
        textField.rightViewMode = .always
        print("‚å®Ô∏è loginTextField —Å–æ–∑–¥–∞–Ω")
        return textField
    }()
    
    lazy var passwordTextField: UITextField = {
        let textField = UITextField()
        textField.placeholder = "Password"
        textField.isSecureTextEntry = true
        textField.borderStyle = .none
        textField.layer.borderWidth = 1
        textField.layer.borderColor = UIColor.black.cgColor
        textField.layer.cornerRadius = 10
        textField.layer.maskedCorners = [.layerMinXMaxYCorner, .layerMaxXMaxYCorner]
        textField.leftView = UIView(frame: CGRect(x: 0, y: 0, width: 10, height: 50))
        textField.leftViewMode = .always
        textField.rightView = UIView(frame: CGRect(x: 0, y: 0, width: 10, height: 50))
        textField.rightViewMode = .always
        print("üîí passwordTextField —Å–æ–∑–¥–∞–Ω")
        return textField
    }()
    
    lazy var logInButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("Log In", for: .normal)
        button.setTitleColor(.white, for: .normal)
        button.backgroundColor = .systemBlue
        button.layer.cornerRadius = 10
        button.addTarget(self, action: #selector(logInButtonTapped), for: .touchUpInside)
        print("üîò logInButton —Å–æ–∑–¥–∞–Ω")
        return button
    }()
    
    lazy var activityIndicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView(style: .medium)
        indicator.hidesWhenStopped = true
        print("‚è≥ activityIndicator —Å–æ–∑–¥–∞–Ω")
        return indicator
    }()
    
    lazy var bruteForceButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("–ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–∞—Ä–æ–ª—å", for: .normal)
        button.setTitleColor(.white, for: .normal)
        button.backgroundColor = .systemRed
        button.layer.cornerRadius = 10
        button.addTarget(self, action: #selector(bruteForceTapped), for: .touchUpInside)
        print("üîê bruteForceButton —Å–æ–∑–¥–∞–Ω")
        return button
    }()
    
    lazy var errorLabel: UILabel = {
        let label = UILabel()
        label.textColor = .red
        label.font = .systemFont(ofSize: 12, weight: .bold)
        print("‚ùóÔ∏è errorLabel —Å–æ–∑–¥–∞–Ω")
        return label
    }()
    
    // MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init(viewModel: LoginViewModeling) {
        self.viewModel = viewModel
        super.init(nibName: nil, bundle: nil)
        print("üöÄ LogInViewController init")
        setupView()
        setupConstraints()
    }
    
    required init?(coder: NSCoder) { fatalError("init(coder:) –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω") }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        print("‚úÖ viewDidLoad –≤—ã–∑–≤–∞–Ω")
        viewModel.delegate = self
        checkLockoutStatus()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.navigationBar.isHidden = true
        print("üëÄ viewWillAppear –≤—ã–∑–≤–∞–Ω, navigationBar —Å–∫—Ä—ã—Ç")
    }
}

//MARK: -  Private EXT
private extension LogInViewController {

    // MARK: - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI

    private func setupView() {
        view.backgroundColor = .white
        view.addSubview(scrollView)
        scrollView.addSubview(contentView)
        contentView.addSubviews(views: [
            logoImageView,
            lockoutLabel,
            loginTextField,
            passwordTextField,
            logInButton,
            errorLabel,
            bruteForceButton,
            activityIndicator
        ])
        print("üõ† setupView –≤—ã–ø–æ–ª–Ω–µ–Ω, –≤—Å–µ –≤—å—é –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    }

    func setupConstraints() {
        scrollView.snp.makeConstraints { make in
            make.edges.equalTo(view.safeAreaLayoutGuide)
        }
        contentView.snp.makeConstraints { make in
            make.edges.equalTo(view)
        }
        logoImageView.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.top.equalToSuperview().offset(120)
            make.height.width.equalTo(100)
        }

        lockoutLabel.snp.makeConstraints { make in
            make.leading.trailing.equalToSuperview().inset(16)
            make.bottom.equalTo(loginTextField.snp.top).offset(-8)
            make.height.equalTo(20)
        }

        errorLabel.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.bottom.equalTo(lockoutLabel.snp.top).offset(-4)
        }

        loginTextField.snp.makeConstraints { make in
            make.height.equalTo(50)
            make.leading.trailing.equalToSuperview().inset(16)
            make.top.equalTo(logoImageView.snp.bottom).offset(120)
        }
        passwordTextField.snp.makeConstraints { make in
            make.height.equalTo(50)
            make.leading.trailing.equalToSuperview().inset(16)
            make.top.equalTo(loginTextField.snp.bottom).offset(1)
        }
        logInButton.snp.makeConstraints { make in
            make.height.equalTo(50)
            make.leading.trailing.equalToSuperview().inset(16)
            make.top.equalTo(passwordTextField.snp.bottom).offset(16)
        }
        bruteForceButton.snp.makeConstraints { make in
            make.top.equalTo(logInButton.snp.bottom).offset(16)
            make.leading.trailing.equalToSuperview().inset(16)
            make.height.equalTo(50)
        }
        activityIndicator.snp.makeConstraints { make in
            make.centerY.equalTo(passwordTextField)
            make.trailing.equalTo(passwordTextField.snp.trailing).inset(8)
        }
        print("üìê setupConstraints –≤—ã–ø–æ–ª–Ω–µ–Ω")
    }

    // MARK: - –õ–æ–≥–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

    func checkLockoutStatus() {
        print("üïµÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")

        if let lockoutUntil = UserDefaults.standard.object(forKey: LoginLockoutKeys.lockoutUntil) as? Date {
            let remaining = Int(lockoutUntil.timeIntervalSinceNow)
            if remaining > 0 {
                print("‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: \(remaining) —Å–µ–∫—É–Ω–¥")
                startLockoutTimer(seconds: remaining)
            } else {
                clearLockout()
            }
        } else {
            print("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
            clearLockout()
        }
    }

    func startLockoutTimer(seconds: Int = 30) {
        print("üîê –°—Ç–∞—Ä—Ç—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ \(seconds) —Å–µ–∫—É–Ω–¥")

        remainingLockoutSeconds = seconds
        updateLockoutUI()
        logInButton.isEnabled = false
        lockoutLabel.isHidden = false

        lockoutTimer?.invalidate()
        lockoutTimer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { [weak self] timer in
            guard let self = self else { return }
            self.remainingLockoutSeconds -= 1
            if self.remainingLockoutSeconds > 0 {
                self.updateLockoutUI()
            } else {
                timer.invalidate()
                self.clearLockout()
            }
        }
    }

    func updateLockoutUI() {
        lockoutLabel.text = "–ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∂–¥–∏—Ç–µ \(remainingLockoutSeconds) —Å–µ–∫."
        logInButton.setTitle("–í—Ö–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", for: .normal)
    }

    func clearLockout() {
        print("‚ôªÔ∏è –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ —Å—á—ë—Ç—á–∏–∫")
        UserDefaults.standard.set(0, forKey: LoginLockoutKeys.failedAttempts)
        UserDefaults.standard.removeObject(forKey: LoginLockoutKeys.lockoutUntil)
        logInButton.isEnabled = true
        logInButton.setTitle("Log In", for: .normal)
        lockoutLabel.isHidden = true
    }

    // MARK: - –î–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–æ–∫

    @objc func logInButtonTapped() {
        print("üîò –ö–Ω–æ–ø–∫–∞ LogIn –Ω–∞–∂–∞—Ç–∞")

        guard let login = loginTextField.text, !login.isEmpty,
              let password = passwordTextField.text, !password.isEmpty else {
            print("‚ö†Ô∏è –õ–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –ø—É—Å—Ç—ã")
            errorLabel.text = "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"
            return
        }

        print("üì• –õ–æ–≥–∏–Ω: \(login), –ü–∞—Ä–æ–ª—å: \(password)")
        viewModel.login(login, password)
    }

    @objc func bruteForceTapped() {
        print("üîê –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ bruteForce")

        let randomPassword = generateRandomPassword(length: 3)
        print("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä–æ–ª—å: \(randomPassword)")

        activityIndicator.startAnimating()
        passwordTextField.text = ""
        passwordTextField.isSecureTextEntry = true

        let bruteForcer = PasswordBruteForcer()
        bruteForcer.bruteForce(passwordToUnlock: randomPassword) { [weak self] foundPassword in
            guard let self = self else { return }
            self.activityIndicator.stopAnimating()
            self.passwordTextField.isSecureTextEntry = false
            self.passwordTextField.text = foundPassword
            print("‚úÖ –ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω: \(foundPassword)")
        }
    }

    func generateRandomPassword(length: Int) -> String {
        let characters = String().printable
        return String((0..<length).compactMap { _ in characters.randomElement() })
    }
}

// MARK: - LoginViewModelDelegate

extension LogInViewController: LoginViewModelDelegate {
    func didReciveErorMessage(_ message: String?) {
        print("‚ùå didReciveErorMessage –≤—ã–∑–≤–∞–Ω–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: \(message ?? "nil")")

        DispatchQueue.main.async {
            self.errorLabel.text = message

            var attempts = UserDefaults.standard.integer(forKey: LoginLockoutKeys.failedAttempts)
            attempts += 1
            UserDefaults.standard.set(attempts, forKey: LoginLockoutKeys.failedAttempts)

            if attempts >= 3 {
                print("üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫. –°—Ç–∞—Ä—Ç—É–µ–º —Ç–∞–π–º–µ—Ä –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
                self.startLockoutTimer()
            }
        }
    }
}

